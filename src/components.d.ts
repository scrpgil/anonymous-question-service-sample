/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AppRoot {
    }
    interface AppTextarea {
        "btText": string;
        "placeholder": string;
    }
    interface AuthButton {
    }
    interface PageHome {
    }
    interface PageMessage {
        "messageId": string;
        "userId": string;
    }
    interface PageMessages {
    }
    interface PageSetting {
    }
    interface PageTabs {
    }
    interface PageUser {
        "userId": string;
    }
    interface PageUsers {
        "userId": string;
    }
    interface UserProfile {
        "image": string;
        "message": string;
        "name": string;
        "size": number;
    }
}
declare global {
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLAppTextareaElement extends Components.AppTextarea, HTMLStencilElement {
    }
    var HTMLAppTextareaElement: {
        prototype: HTMLAppTextareaElement;
        new (): HTMLAppTextareaElement;
    };
    interface HTMLAuthButtonElement extends Components.AuthButton, HTMLStencilElement {
    }
    var HTMLAuthButtonElement: {
        prototype: HTMLAuthButtonElement;
        new (): HTMLAuthButtonElement;
    };
    interface HTMLPageHomeElement extends Components.PageHome, HTMLStencilElement {
    }
    var HTMLPageHomeElement: {
        prototype: HTMLPageHomeElement;
        new (): HTMLPageHomeElement;
    };
    interface HTMLPageMessageElement extends Components.PageMessage, HTMLStencilElement {
    }
    var HTMLPageMessageElement: {
        prototype: HTMLPageMessageElement;
        new (): HTMLPageMessageElement;
    };
    interface HTMLPageMessagesElement extends Components.PageMessages, HTMLStencilElement {
    }
    var HTMLPageMessagesElement: {
        prototype: HTMLPageMessagesElement;
        new (): HTMLPageMessagesElement;
    };
    interface HTMLPageSettingElement extends Components.PageSetting, HTMLStencilElement {
    }
    var HTMLPageSettingElement: {
        prototype: HTMLPageSettingElement;
        new (): HTMLPageSettingElement;
    };
    interface HTMLPageTabsElement extends Components.PageTabs, HTMLStencilElement {
    }
    var HTMLPageTabsElement: {
        prototype: HTMLPageTabsElement;
        new (): HTMLPageTabsElement;
    };
    interface HTMLPageUserElement extends Components.PageUser, HTMLStencilElement {
    }
    var HTMLPageUserElement: {
        prototype: HTMLPageUserElement;
        new (): HTMLPageUserElement;
    };
    interface HTMLPageUsersElement extends Components.PageUsers, HTMLStencilElement {
    }
    var HTMLPageUsersElement: {
        prototype: HTMLPageUsersElement;
        new (): HTMLPageUsersElement;
    };
    interface HTMLUserProfileElement extends Components.UserProfile, HTMLStencilElement {
    }
    var HTMLUserProfileElement: {
        prototype: HTMLUserProfileElement;
        new (): HTMLUserProfileElement;
    };
    interface HTMLElementTagNameMap {
        "app-root": HTMLAppRootElement;
        "app-textarea": HTMLAppTextareaElement;
        "auth-button": HTMLAuthButtonElement;
        "page-home": HTMLPageHomeElement;
        "page-message": HTMLPageMessageElement;
        "page-messages": HTMLPageMessagesElement;
        "page-setting": HTMLPageSettingElement;
        "page-tabs": HTMLPageTabsElement;
        "page-user": HTMLPageUserElement;
        "page-users": HTMLPageUsersElement;
        "user-profile": HTMLUserProfileElement;
    }
}
declare namespace LocalJSX {
    interface AppRoot {
    }
    interface AppTextarea {
        "btText"?: string;
        "onClicked"?: (event: CustomEvent<any>) => void;
        "placeholder"?: string;
    }
    interface AuthButton {
    }
    interface PageHome {
    }
    interface PageMessage {
        "messageId"?: string;
        "userId"?: string;
    }
    interface PageMessages {
    }
    interface PageSetting {
    }
    interface PageTabs {
    }
    interface PageUser {
        "userId"?: string;
    }
    interface PageUsers {
        "userId"?: string;
    }
    interface UserProfile {
        "image"?: string;
        "message"?: string;
        "name"?: string;
        "size"?: number;
    }
    interface IntrinsicElements {
        "app-root": AppRoot;
        "app-textarea": AppTextarea;
        "auth-button": AuthButton;
        "page-home": PageHome;
        "page-message": PageMessage;
        "page-messages": PageMessages;
        "page-setting": PageSetting;
        "page-tabs": PageTabs;
        "page-user": PageUser;
        "page-users": PageUsers;
        "user-profile": UserProfile;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "app-textarea": LocalJSX.AppTextarea & JSXBase.HTMLAttributes<HTMLAppTextareaElement>;
            "auth-button": LocalJSX.AuthButton & JSXBase.HTMLAttributes<HTMLAuthButtonElement>;
            "page-home": LocalJSX.PageHome & JSXBase.HTMLAttributes<HTMLPageHomeElement>;
            "page-message": LocalJSX.PageMessage & JSXBase.HTMLAttributes<HTMLPageMessageElement>;
            "page-messages": LocalJSX.PageMessages & JSXBase.HTMLAttributes<HTMLPageMessagesElement>;
            "page-setting": LocalJSX.PageSetting & JSXBase.HTMLAttributes<HTMLPageSettingElement>;
            "page-tabs": LocalJSX.PageTabs & JSXBase.HTMLAttributes<HTMLPageTabsElement>;
            "page-user": LocalJSX.PageUser & JSXBase.HTMLAttributes<HTMLPageUserElement>;
            "page-users": LocalJSX.PageUsers & JSXBase.HTMLAttributes<HTMLPageUsersElement>;
            "user-profile": LocalJSX.UserProfile & JSXBase.HTMLAttributes<HTMLUserProfileElement>;
        }
    }
}
